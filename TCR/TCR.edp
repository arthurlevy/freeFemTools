//two meshes in contact at x=1
mesh meshleft=square(20,20);
mesh meshright=square(19,19,[x+1,y]);

plot(meshright);
plot(meshleft);
// Boundary mesh. ideally we would limit it to the interface boundary.
//I do not know how to do that...mesh meshinterf = emptymesh(meshleft);

// FE spaces
fespace spaceleft(meshleft,P2);fespace spaceright(meshright,P2);
fespace SpaceBound(meshinterf,P2);
spaceleft uleft,uuleft;
spaceright uright,uuright;SpaceBound phi, phiphi;


//trick to handle the dofs on useless boundaries (1,2 and 3)
varf von(u,v)= on(2,u=1);
real[int] on1=von(0,SpaceBound, tgv=1); // one on boundary dofs
int[int] I(SpaceBound.ndof); // to get indices of boundary dofs
int k=0;
for (int i=0;i<SpaceBound.ndof;++i)
{
	if( on1[i]) I[i]=k++; // set -1 at indices on boundary dofs
	else I[i]=-1; //numbers all remaining dofs starting at 0
}




real TCR = 0.5;


macro grad(field)[dx(field),dy(field)]//2D gradient
macro normal[N.x, N.y]//outward normal on a boundary



////////VARIATIONAL FORMS
//right Problemvarf rightpb(uright,uuright) =
int2d(meshright)( grad(uright)'*grad(uuright) ) +int1d(meshright,4)(grad(uright)'*[-1,0]*uuright) - int1d(meshright,4)(phi*uuright)
+ on(2,uright= 0 ) ;

//left pb
varf leftpb(uleft,uuleft) =int2d(meshleft)( grad(uleft)'*grad(uuleft) ) +int1d(meshleft,2)(grad(uleft)'*[1,0]*uuleft) + int1d(meshleft,2)(phi*uuleft)
+ on(4,uleft= 1 );


//additional condition uleft=uright on boundary
varf vphi(phi,phiphi) =
	int1d(meshinterf,2) (  (uright-uleft) * phiphi)
	+int1d(meshinterf,2) (  -TCR * phi*phiphi);

//crossed terms are actually all +/- the same
varf crossterms(S,T) = int1d(meshinterf,2)(S*T);
varf crosstermsminus(S,T) = int1d(meshinterf,2)(-S*T);



/////ASSEMBLING VECTOR
real[int] R1 = rightpb(0,spaceright);
real[int] R2 = leftpb(0,spaceleft);
real[int] RphiFull = vphi(0,SpaceBound);

//  Remove from Rphi the rows from boundaries 1,2 and 3
real[int] Rphi(k);
for (int k2=0;k2<SpaceBound.ndof;k2++)
{
	if(I[k2]!=-1) Rphi(I[k2])=RphiFull[k2];
}

real[int] R = [R1,R2,Rphi];




//////ASSEMBLING MATRIX
matrix Kright = rightpb(spaceright,spaceright);
matrix Kleft = leftpb(spaceleft,spaceleft);
matrix Kphi = vphi(SpaceBound,SpaceBound);

//cross terms
matrix Kphiright = crossterms(SpaceBound,spaceright);
matrix Kphileft = crosstermsminus(SpaceBound,spaceleft);

matrix Krightphi = crossterms(spaceright,SpaceBound);
matrix Kleftphi = crosstermsminus(spaceleft, SpaceBound);



/////  Remove from Kphi the rows and columns from boundaries 1,2 and 3
Kphi = Kphi(I^-1,I^-1);

//we keep all dofs in right and left meshes
int[int] Iright = 0:spaceright.ndof-1 ; 
int[int] Ileft = 0:spaceleft.ndof-1 ;

Kphiright = Kphiright(Iright^-1,I^-1);
Kphileft = Kphileft(Ileft^-1,I^-1);
Krightphi = Krightphi(I^-1,Iright^-1);
Kleftphi = Kleftphi(I^-1,Ileft^-1);


//concatenate
matrix K = [ [Kright, 0, Kphiright],
			 [0, Kleft, Kphileft] ,
			 [Krightphi,Kleftphi,Kphi]  ];
//cout << "K" << K << endl;
//solve
set(K, solver=sparsesolver);

//cout << "R" << R << endl;real[int] X  = K^-1*R;


//update
[uright[],uleft[]] = X(0:spaceleft.ndof+spaceright.ndof-1);plot(uleft,uright,wait=true);