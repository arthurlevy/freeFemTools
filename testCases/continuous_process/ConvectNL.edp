
mesh Th=square(10,20);
real vx = 0.5;
real eps = 1e-6;

real leftCondition = 3;

macro Grad(T) [ dx(T),  dy(T)  ]//


fespace Vh(Th,P1);
Vh A,AA,dA, he, tausupg, f,sensib;

//impose Dirichlet BC on first guess:
A = leftCondition;

// compute the sludge factor for supg
//he is considered as sqrt of the current triangle area
tausupg = 1 * sqrt(area)/vx;

plot(tausupg, wait=1);


real err=1;
for(int n=0; n< 20; n++) // Newton Loop
{

	//updating fields
	f =  A;

	sensib = 1;

	//checking for convergence
	err = dA[].linfty;
	cout << n << " err = " << err <<endl;
	if(n>0 && err<eps) break;
    
//defining variational forms
  solve myproblem(dA,AA) =
      int2d(Th) (vx * dx(dA) * AA    + tausupg * dx(dA) * vx * vx * dx(AA)
                - sensib *dA * AA - tausupg * dA * sensib * vx * dx(AA)
                )
      - int2d(Th)(vx * dx(A) * AA + tausupg * dx(A) * vx*vx *dx(AA)
                  - f * AA - tausupg * f * vx * dx(AA)
                  )

      + on (4, dA=0);
          
	A[]-=dA[];

	}           

plot(A,wait=1);

Vh analytical = leftCondition*exp(x/vx);

plot(analytical,wait=1);
